// server.js

// 1. T·∫£i c√°c th∆∞ vi·ªán ƒë√£ c√†i ƒë·∫∑t
require('dotenv').config(); // T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
const express = require('express');
const cors = require('cors');
const { GoogleGenAI, Type } = require('@google/genai');

// 2. Kh·ªüi t·∫°o
const app = express();
const PORT = process.env.PORT || 3001;
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

// 3. C·∫•u h√¨nh Middleware
const corsOptions = {
  origin: 'https://ai-ho-tro-y-khoa-by-qmin.onrender.com', // URL ch√≠nh x√°c c·ªßa frontend c·ªßa b·∫°n
  optionsSuccessStatus: 200 
};
app.use(cors(corsOptions));
app.use(express.json({ limit: '10mb' })); // Cho ph√©p server nh·∫≠n d·ªØ li·ªáu JSON l·ªõn

// --- API Endpoint #1: T·∫°o G√≥i h·ªçc t·∫≠p ---
app.post('/api/create-study-pack', async (req, res) => {
  try {
    const { source } = req.body;
    if (!source || (!source.text && !source.file)) {
      return res.status(400).json({ error: 'Vui l√≤ng cung c·∫•p vƒÉn b·∫£n ho·∫∑c m·ªôt t·ªáp.' });
    }
    
    // Schema v√† Prompt ƒë∆∞·ª£c sao ch√©p v√† c·∫≠p nh·∫≠t t·ª´ `services/geminiService.ts` c·ªßa frontend
    // ƒê·∫£m b·∫£o logic gi·ªëng h·ªát nhau
    const studyPackSchema = {
        type: Type.OBJECT,
        properties: {
            title: { type: Type.STRING, description: "M·ªôt ti√™u ƒë·ªÅ ng·∫Øn g·ªçn, h·∫•p d·∫´n cho g√≥i h·ªçc t·∫≠p d·ª±a tr√™n vƒÉn b·∫£n." },
            lesson: {
                type: Type.ARRAY,
                description: "M·ªôt b√†i gi·∫£ng c√≥ c·∫•u tr√∫c, to√†n di·ªán ƒë∆∞·ª£c t·∫°o ra t·ª´ vƒÉn b·∫£n g·ªëc, ƒë∆∞·ª£c l√†m gi√†u b·∫±ng c√°c gi·∫£i th√≠ch chuy√™n s√¢u. B√†i gi·∫£ng n√†y ƒë∆∞·ª£c chia th√†nh c√°c kh·ªëi n·ªôi dung logic ƒë·ªÉ d·ªÖ h·ªçc.",
                items: {
                    type: Type.OBJECT,
                    properties: {
                        type: { type: Type.STRING, enum: ['heading', 'paragraph', 'tip', 'warning', 'example', 'table'], description: "Lo·∫°i kh·ªëi n·ªôi dung." },
                        content: { type: Type.STRING, description: "N·ªôi dung vƒÉn b·∫£n. ƒê·ªëi v·ªõi b·∫£ng, ƒë√¢y l√† ti√™u ƒë·ªÅ c·ªßa b·∫£ng. Tu√¢n th·ªß c√°c quy t·∫Øc ƒë·ªãnh d·∫°ng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong prompt." },
                        tableData: {
                            type: Type.OBJECT,
                            description: "D·ªØ li·ªáu cho b·∫£ng, ch·ªâ s·ª≠ d·ª•ng khi type l√† 'table'.",
                            properties: {
                                headers: { type: Type.ARRAY, items: { type: Type.STRING }, description: "M·∫£ng c√°c chu·ªói cho ti√™u ƒë·ªÅ c·ªôt." },
                                rows: { type: Type.ARRAY, description: "M·∫£ng c√°c h√†ng, trong ƒë√≥ m·ªói h√†ng l√† m·ªôt m·∫£ng c√°c chu·ªói.", items: { type: Type.ARRAY, items: { type: Type.STRING } } }
                            },
                            required: ["headers", "rows"]
                        }
                    },
                    required: ["type", "content"]
                }
            },
            conciseSummary: {
                type: Type.STRING,
                description: "M·ªôt b·∫£n t√≥m t·∫Øt c·ª±c k·ª≥ c√¥ ƒë·ªçng (3-5 g·∫°ch ƒë·∫ßu d√≤ng), ch·ªâ t·∫≠p trung v√†o c√°c ƒëi·ªÉm ch√≠nh v·ªÅ Sinh l√Ω b·ªánh, Ch·∫©n ƒëo√°n v√† ƒêi·ªÅu tr·ªã t·ª´ b√†i gi·∫£ng. B·∫£n t√≥m t·∫Øt n√†y ph·∫£i tu√¢n th·ªß c√°c quy t·∫Øc ƒë·ªãnh d·∫°ng vƒÉn b·∫£n ƒë√£ ch·ªâ ƒë·ªãnh (in ƒë·∫≠m, highlight, v.v.) v√† m·ªói m·ª•c ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng '- '."
            },
            quiz: {
                type: Type.ARRAY,
                description: "T·∫°o 8-12 c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªõi ƒë·ªô kh√≥ kh√°c nhau, bao g·ªìm c·∫£ t√¨nh hu·ªëng l√¢m s√†ng, c√¢u h·ªèi m·ªôt l·ª±a ch·ªçn v√† nhi·ªÅu l·ª±a ch·ªçn.",
                items: {
                    type: Type.OBJECT,
                    properties: {
                        question: { type: Type.STRING },
                        options: { type: Type.ARRAY, items: { type: Type.STRING } },
                        correctAnswers: { type: Type.ARRAY, items: { type: Type.STRING }, description: "M·ªôt m·∫£ng ch·ª©a (c√°c) c√¢u tr·∫£ l·ªùi ƒë√∫ng." },
                        type: { type: Type.STRING, enum: ['single-choice', 'multiple-choice'], description: "Lo·∫°i c√¢u h·ªèi tr·∫Øc nghi·ªám."},
                        explanation: { type: Type.STRING, description: "M·ªôt l·ªùi gi·∫£i th√≠ch ng·∫Øn g·ªçn cho c√¢u tr·∫£ l·ªùi ƒë√∫ng." },
                        difficulty: { type: Type.STRING, enum: ['Easy', 'Medium', 'Hard'] }
                    },
                    required: ["question", "options", "correctAnswers", "type", "explanation", "difficulty"]
                }
            },
            m2StaatexamQuiz: {
                type: Type.ARRAY,
                description: "T·∫°o 5-12 c√¢u h·ªèi tr·∫Øc nghi·ªám theo phong c√°ch M2 Staatsexamen. M·ªói c√¢u h·ªèi ph·∫£i l√† d·∫°ng single-choice v·ªõi 5 l·ª±a ch·ªçn, b·∫Øt ƒë·∫ßu b·∫±ng m·ªôt ca l√¢m s√†ng chi ti·∫øt, v√† ki·ªÉm tra kh·∫£ nƒÉng √°p d·ª•ng ki·∫øn th·ª©c l√¢m s√†ng.",
                items: {
                    type: Type.OBJECT,
                    properties: {
                        question: { type: Type.STRING },
                        options: { type: Type.ARRAY, items: { type: Type.STRING }, description: "M·ªôt m·∫£ng ch·ª©a ch√≠nh x√°c 5 ph∆∞∆°ng √°n tr·∫£ l·ªùi." },
                        correctAnswers: { type: Type.ARRAY, items: { type: Type.STRING }, description: "M·ªôt m·∫£ng ch·ª©a DUY NH·∫§T m·ªôt c√¢u tr·∫£ l·ªùi ƒë√∫ng." },
                        type: { type: Type.STRING, enum: ['single-choice'], description: "Lo·∫°i c√¢u h·ªèi B·∫ÆT BU·ªòC ph·∫£i l√† 'single-choice'."},
                        explanation: { type: Type.STRING, description: "M·ªôt l·ªùi gi·∫£i th√≠ch ng·∫Øn g·ªçn cho c√¢u tr·∫£ l·ªùi ƒë√∫ng." },
                        difficulty: { type: Type.STRING, enum: ['Easy', 'Medium', 'Hard'] }
                    },
                    required: ["question", "options", "correctAnswers", "type", "explanation", "difficulty"]
                }
            },
            fillInTheBlanks: {
                type: Type.ARRAY,
                description: "T·∫°o 5-7 c√¢u h·ªèi ƒëi·ªÅn v√†o ch·ªó tr·ªëng t·∫≠p trung v√†o c√°c thu·∫≠t ng·ªØ ch√≠nh. S·ª≠ d·ª•ng '____' l√†m ch·ªó tr·ªëng.",
                items: {
                    type: Type.OBJECT,
                    properties: {
                        sentence: { type: Type.STRING },
                        answer: { type: Type.STRING }
                    },
                    required: ["sentence", "answer"]
                }
            },
            glossary: {
                type: Type.ARRAY,
                description: "M·ªôt danh s√°ch c√°c thu·∫≠t ng·ªØ quan tr·ªçng v√† ƒë·ªãnh nghƒ©a c·ªßa ch√∫ng t·ª´ vƒÉn b·∫£n.",
                items: {
                    type: Type.OBJECT,
                    properties: {
                        term: { type: Type.STRING },
                        definition: { type: Type.STRING }
                    },
                    required: ["term", "definition"]
                }
            }
        },
        required: ["title", "lesson", "conciseSummary", "quiz", "m2StaatexamQuiz", "fillInTheBlanks", "glossary"]
    };

    const basePrompt = `B·∫°n l√† m·ªôt chuy√™n gia bi√™n so·∫°n gi√°o tr√¨nh y khoa, chuy√™n t·∫°o ra c√°c c√¢u h·ªèi √¥n t·∫≠p ch·∫•t l∆∞·ª£ng cao theo phong c√°ch M2 Staatsexamen. Nhi·ªám v·ª• c·ªßa b·∫°n l√† chuy·ªÉn ƒë·ªïi t√†i li·ªáu y khoa do ng∆∞·ªùi d√πng cung c·∫•p th√†nh m·ªôt G√≥i h·ªçc t·∫≠p to√†n di·ªán b·∫±ng ti·∫øng Vi·ªát, t·∫≠p trung v√†o ki·∫øn th·ª©c "high-yield" v√† kh·∫£ nƒÉng √°p d·ª•ng l√¢m s√†ng. H√£y tu√¢n th·ªß nghi√™m ng·∫∑t c√°c quy t·∫Øc sau:

1.  **Ph√¢n T√≠ch & T·ªïng H·ª£p B√†i Gi·∫£ng:**
    *   X√°c ƒë·ªãnh ch·ªß ƒë·ªÅ ch√≠nh v√† c√°c kh√°i ni·ªám c·ªët l√µi.
    *   T√°i c·∫•u tr√∫c th√¥ng tin th√†nh m·ªôt b√†i gi·∫£ng c√≥ logic, d·ªÖ hi·ªÉu. S·ª≠ d·ª•ng ti√™u ƒë·ªÅ, ƒëo·∫°n vƒÉn, b·∫£ng bi·ªÉu, m·∫πo, c·∫£nh b√°o v√† v√≠ d·ª•.
    *   **T·∫°o B·∫£ng T·ª± ƒê·ªông:** N·∫øu n·ªôi dung m√¥ t·∫£ s·ª± so s√°nh (v√≠ d·ª•: so s√°nh hai h·ªôi ch·ª©ng) ho·∫∑c m·ªôt h·ªá th·ªëng ph√¢n lo·∫°i ph·ª©c t·∫°p, B·∫ÆT BU·ªòC ph·∫£i chuy·ªÉn n√≥ th√†nh d·∫°ng b·∫£ng (\`type: 'table'\`) ƒë·ªÉ d·ªÖ so s√°nh.
    *   **QUY T·∫ÆC B·∫¢NG (C·ª∞C K·ª≤ QUAN TR·ªåNG):** Khi t·∫°o m·ªôt kh·ªëi \`type: 'table'\`, b·∫°n **B·∫ÆT BU·ªòC** ph·∫£i ƒëi·ªÅn d·ªØ li·ªáu (ti√™u ƒë·ªÅ c·ªôt v√† c√°c h√†ng) v√†o ƒë·ªëi t∆∞·ª£ng \`tableData\`. Tr∆∞·ªùng \`content\` ch·ªâ ƒë∆∞·ª£c ph√©p ch·ª©a **ti√™u ƒë·ªÅ ch√≠nh** c·ªßa b·∫£ng. **TUY·ªÜT ƒê·ªêI KH√îNG** ƒë∆∞·ª£c ƒë·∫∑t b·∫£ng ƒë·ªãnh d·∫°ng Markdown v√†o trong tr∆∞·ªùng \`content\`.
    *   **ƒê·ªãnh D·∫°ng N·ªôi Dung VƒÉn B·∫£n:** S·ª≠ d·ª•ng c√°c th·∫ª sau ƒë·ªÉ ƒë·ªãnh d·∫°ng vƒÉn b·∫£n trong T·∫§T C·∫¢ c√°c lo·∫°i n·ªôi dung (ƒëo·∫°n vƒÉn, m·∫πo, c·∫£nh b√°o, √¥ b·∫£ng, v.v.):
        *   **In ƒë·∫≠m:** \`**vƒÉn b·∫£n**\`. D√πng cho c√°c thu·∫≠t ng·ªØ r·∫•t quan tr·ªçng ho·∫∑c c√°c ti√™u ƒë·ªÅ ph·ª• trong m·ªôt kh·ªëi vƒÉn b·∫£n.
        *   **In nghi√™ng:** \`*vƒÉn b·∫£n*\`. D√πng ƒë·ªÉ nh·∫•n m·∫°nh ho·∫∑c cho c√°c thu·∫≠t ng·ªØ ti·∫øng n∆∞·ªõc ngo√†i.
        *   **G·∫°ch ch√¢n:** \`__vƒÉn b·∫£n__\`. S·ª≠ d·ª•ng m·ªôt c√°ch ti·∫øt ki·ªám cho s·ª± nh·∫•n m·∫°nh ƒë·∫∑c bi·ªát.
        *   **Highlight:** \`==vƒÉn b·∫£n==\`. D√πng ƒë·ªÉ l√†m n·ªïi b·∫≠t th√¥ng tin "high-yield", c√°c gi√° tr·ªã quan tr·ªçng, ho·∫∑c c√°c ƒëi·ªÉm c·∫ßn ghi nh·ªõ.
        *   **Thu·∫≠t ng·ªØ y khoa (M√†u xanh):** \`[HL]vƒÉn b·∫£n[/HL]\`. D√†nh ri√™ng cho c√°c thu·∫≠t ng·ªØ y khoa ch√≠nh.
        *   **Gi·∫£i th√≠ch thu·∫≠t ng·ªØ (Tooltip):** \`[DEF term="Thu·∫≠t ng·ªØ"]N·ªôi dung gi·∫£i th√≠ch.[/DEF]\`.
    *   **ƒê·ªãnh D·∫°ng C·∫•u Tr√∫c:**
        *   **Ti√™u ƒë·ªÅ (heading):** LU√îN LU√îN b·∫Øt ƒë·∫ßu b·∫±ng m·ªôt bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c (emoji) ph√π h·ª£p v√† m·ªôt d·∫•u c√°ch (v√≠ d·ª•: "ü©∫ Ch·∫©n ƒëo√°n", "üî¨ X√©t nghi·ªám").
        *   **Ti√™u ƒë·ªÅ ch√≠nh (IN HOA):** C√°c ti√™u ƒë·ªÅ ch√≠nh trong y khoa nh∆∞ ƒê·ªäNH NGHƒ®A, D·ªäCH T·ªÑ H·ªåC, NGUY√äN NH√ÇN, SINH L√ù B·ªÜNH, TRI·ªÜU CH·ª®NG L√ÇM S√ÄNG, CH·∫®N ƒêO√ÅN, ƒêI·ªÄU TR·ªä, v√† PH√íNG NG·ª™A B·∫ÆT BU·ªòC ph·∫£i ƒë∆∞·ª£c vi·∫øt IN HOA to√†n b·ªô (v√≠ d·ª•: "üî¨ CH·∫®N ƒêO√ÅN", "üíä ƒêI·ªÄU TR·ªä").
        *   **QUY T·∫ÆC N·ªòI DUNG C√ì GI√Å TR·ªä (C·ª∞C K·ª≤ QUAN TR·ªåNG):** N·ªôi dung c·ªßa c√°c kh·ªëi \`tip\`, \`warning\`, v√† \`example\` B·∫ÆT BU·ªòC ph·∫£i l√† m·ªôt l·ªùi khuy√™n, c·∫£nh b√°o ho·∫∑c v√≠ d·ª• th·ª±c s·ª± h·ªØu √≠ch. TUY·ªÜT ƒê·ªêI KH√îNG ƒë∆∞·ª£c ƒëi·ªÅn n·ªôi dung gi·ªØ ch·ªó ho·∫∑c ch·ªâ ƒëi·ªÅn t√™n c·ªßa ch√≠nh lo·∫°i kh·ªëi ƒë√≥ (v√≠ d·ª•: kh√¥ng ƒë∆∞·ª£c t·∫°o kh·ªëi \`{"type": "tip", "content": "tip"}\`).
        *   **QUY T·∫ÆC GOM NH√ìM N·ªòI DUNG (C·ª∞C K·ª≤ QUAN TR·ªåNG):** Khi t·∫°o m·ªôt kh·ªëi \`tip\`, \`warning\`, ho·∫∑c \`example\`, b·∫°n B·∫ÆT BU·ªòC ph·∫£i g·ªôp TO√ÄN B·ªò n·ªôi dung li√™n quan (bao g·ªìm ti√™u ƒë·ªÅ, ƒëo·∫°n vƒÉn, v√† danh s√°ch) v√†o trong M·ªòT tr∆∞·ªùng \`content\` duy nh·∫•t. TUY·ªÜT ƒê·ªêI kh√¥ng ƒë∆∞·ª£c t√°ch m·ªôt ti√™u ƒë·ªÅ v√† danh s√°ch ƒëi k√®m c·ªßa n√≥ th√†nh hai kh·ªëi ri√™ng bi·ªát.
        *   ƒê·ªëi v·ªõi c√°c lo·∫°i \`tip\`, \`warning\`, v√† \`example\`, **KH√îNG** bao g·ªìm bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c (v√≠ d·ª•: üí°, ‚ö†Ô∏è) trong tr∆∞·ªùng \`content\`. Giao di·ªán ng∆∞·ªùi d√πng s·∫Ω t·ª± ƒë·ªông th√™m ch√∫ng.
        *   **Danh s√°ch (Lists):** ƒê·ªëi v·ªõi c√°c danh s√°ch, LU√îN LU√îN b·∫Øt ƒë·∫ßu m·ªói m·ª•c b·∫±ng m·ªôt d·∫•u g·∫°ch ngang v√† m·ªôt d·∫•u c√°ch (v√≠ d·ª•: \`- M·ª•c 1\`).
        *   **QUY T·∫ÆC DANH S√ÅCH (C·ª∞C K·ª≤ QUAN TR·ªåNG):** Khi t·∫°o m·ªôt danh s√°ch, m·ªói m·ª•c B·∫ÆT BU·ªòC ph·∫£i b·∫Øt ƒë·∫ßu tr√™n m·ªôt d√≤ng m·ªõi. TUY·ªÜT ƒê·ªêI KH√îNG ƒë∆∞·ª£c g·ªôp nhi·ªÅu m·ª•c danh s√°ch v√†o c√πng m·ªôt d√≤ng.
        *   **ƒê·ªãnh d·∫°ng T·ª´ Vi·∫øt T·∫Øt Ghi Nh·ªõ (Mnemonics - C·ª∞C K·ª≤ QUAN TR·ªåNG):** Khi gi·∫£i th√≠ch m·ªôt t·ª´ vi·∫øt t·∫Øt ghi nh·ªõ (v√≠ d·ª•: PIRATES, MONA), B·∫ÆT BU·ªòC ph·∫£i ƒë·ªãnh d·∫°ng n√≥ d∆∞·ªõi d·∫°ng danh s√°ch, v·ªõi m·ªói ch·ªØ c√°i v√† ph·∫ßn gi·∫£i th√≠ch t∆∞∆°ng ·ª©ng n·∫±m tr√™n m·ªôt d√≤ng ri√™ng. V√≠ d·ª• ƒë√∫ng:
            \`\`\`
            - P ‚Äì B·ªánh l√Ω ph·ªïi
            - I ‚Äì Thi·∫øu m√°u c·ª•c b·ªô (Ischemia)
            - R ‚Äì B·ªánh tim do th·∫•p kh·ªõp (Rheumatic heart disease)
            \`\`\`
            TUY·ªÜT ƒê·ªêI kh√¥ng vi·∫øt: \`P ‚Äì B·ªánh l√Ω ph·ªïi, I ‚Äì Thi·∫øu m√°u c·ª•c b·ªô, R ‚Äì B·ªánh tim...\`

2.  **T·∫°o T√≥m t·∫Øt C√¥ ƒë·ªçng (QUAN TR·ªåNG):**
    *   T·ª´ b√†i gi·∫£ng ƒë√£ t·∫°o, h√£y vi·∫øt m·ªôt b·∫£n t√≥m t·∫Øt **c·ª±c k·ª≥ c√¥ ƒë·ªçng** d∆∞·ªõi d·∫°ng danh s√°ch g·∫°ch ƒë·∫ßu d√≤ng (15-20 g·∫°ch ƒë·∫ßu d√≤ng).
    *   M·ªói g·∫°ch ƒë·∫ßu d√≤ng n√™n ch·∫Øt l·ªçc m·ªôt kh√≠a c·∫°nh l√¢m s√†ng quan tr·ªçng: **Sinh l√Ω b·ªánh**, **Ch·∫©n ƒëo√°n**, ho·∫∑c **ƒêi·ªÅu tr·ªã**.
    *   S·ª≠ d·ª•ng c√°c th·∫ª ƒë·ªãnh d·∫°ng (v√≠ d·ª•: \`**vƒÉn b·∫£n**\`, \`==vƒÉn b·∫£n==\`, \`[HL]vƒÉn b·∫£n[/HL]\`) ƒë·ªÉ l√†m n·ªïi b·∫≠t c√°c t·ª´ kh√≥a ch√≠nh trong t√≥m t·∫Øt.
    *   B·∫ÆT ƒê·∫¶U m·ªói m·ª•c trong danh s√°ch b·∫±ng m·ªôt d·∫•u g·∫°ch ngang v√† m·ªôt d·∫•u c√°ch (v√≠ d·ª•: \`- M·ª•c 1\`).

3.  **T·∫°o C√¢u H·ªèi Tr·∫Øc Nghi·ªám (Quiz) ƒêa D·∫°ng:**
    *   **S·ªë l∆∞·ª£ng:** T·∫°o ra 8-12 c√¢u h·ªèi tr·∫Øc nghi·ªám.
    *   **ƒêa d·∫°ng h√≥a:** T·∫°o m·ªôt s·ª± k·∫øt h·ª£p ƒëa d·∫°ng c√°c lo·∫°i c√¢u h·ªèi:
        *   **C√¢u h·ªèi d·ª±a tr√™n ca l√¢m s√†ng (Vignette):** B·∫Øt ƒë·∫ßu c√¢u h·ªèi b·∫±ng m·ªôt k·ªãch b·∫£n l√¢m s√†ng ng·∫Øn g·ªçn (2-4 c√¢u) m√¥ t·∫£ b·ªánh nh√¢n, tri·ªáu ch·ª©ng v√† c√°c ph√°t hi·ªán ban ƒë·∫ßu, sau ƒë√≥ ƒë·∫∑t m·ªôt c√¢u h·ªèi li√™n quan ƒë·∫øn ch·∫©n ƒëo√°n, x√©t nghi·ªám ti·∫øp theo ho·∫∑c ƒëi·ªÅu tr·ªã.
        *   **C√¢u h·ªèi ch·ªçn m·ªôt ƒë√°p √°n ƒë√∫ng (\`type: 'single-choice'\`):** C√¢u h·ªèi tr·∫Øc nghi·ªám ti√™u chu·∫©n.
        *   **C√¢u h·ªèi ch·ªçn nhi·ªÅu ƒë√°p √°n ƒë√∫ng (\`type: 'multiple-choice'\`):** ƒê·∫∑t c√¢u h·ªèi y√™u c·∫ßu "ch·ªçn t·∫•t c·∫£ c√°c ƒë√°p √°n ph√π h·ª£p" ho·∫∑c "ch·ªçn X ƒë√°p √°n ƒë√∫ng".
    *   **QUAN TR·ªåNG (ƒê√°p √°n ƒë√∫ng):** ƒê·ªëi v·ªõi M·ªåI c√¢u h·ªèi, b·∫°n B·∫ÆT BU·ªòC ph·∫£i cung c·∫•p (c√°c) c√¢u tr·∫£ l·ªùi ƒë√∫ng trong m·∫£ng \`correctAnswers\`. VƒÉn b·∫£n c·ªßa (c√°c) c√¢u tr·∫£ l·ªùi n√†y ph·∫£i **KH·ªöP CH√çNH X√ÅC** v·ªõi vƒÉn b·∫£n c·ªßa t√πy ch·ªçn t∆∞∆°ng ·ª©ng.
    *   **Ch·∫•t l∆∞·ª£ng:** C√°c l·ª±a ch·ªçn sai (distractors) ph·∫£i h·ª£p l√Ω v√† ph·ªï bi·∫øn ƒë·ªÉ th·ª±c s·ª± ki·ªÉm tra s·ª± hi·ªÉu bi·∫øt.
    *   **Gi·∫£i th√≠ch:** Cung c·∫•p m·ªôt l·ªùi gi·∫£i th√≠ch r√µ r√†ng v√† s√∫c t√≠ch cho c√¢u tr·∫£ l·ªùi ƒë√∫ng.

4.  **T·∫°o C√¢u H·ªèi Tr·∫Øc Nghi·ªám Phong C√°ch M2 Staatsexamen (QUAN TR·ªåNG):**
    *   **Vai tr√≤:** B·∫°n l√† chuy√™n gia t·∫°o c√¢u h·ªèi thi theo ti√™u chu·∫©n c·ªßa IMPP cho k·ª≥ thi M2 Staatsexamen.
    *   **S·ªë l∆∞·ª£ng:** T·∫°o ra 5-12 c√¢u h·ªèi.
    *   **C·∫•u tr√∫c B·∫ÆT BU·ªòC:**
        *   T·∫•t c·∫£ c√°c c√¢u h·ªèi ph·∫£i l√† d·∫°ng **Single-Choice**.
        *   M·ªói c√¢u h·ªèi ph·∫£i c√≥ **ch√≠nh x√°c 5 ph∆∞∆°ng √°n tr·∫£ l·ªùi**.
        *   Ch·ªâ c√≥ **duy nh·∫•t M·ªòT ƒë√°p √°n ƒë√∫ng**.
    *   **N·ªôi dung c√¢u h·ªèi (∆Øu ti√™n Case-based):**
        *   M·ªói c√¢u h·ªèi B·∫ÆT BU·ªòC ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng m·ªôt ca b·ªánh (case vignette) chi ti·∫øt (3-5 c√¢u tr·ªü l√™n), m√¥ t·∫£ b·ªánh nh√¢n (tu·ªïi, gi·ªõi t√≠nh), tri·ªáu ch·ª©ng, ti·ªÅn s·ª≠, k·∫øt qu·∫£ kh√°m v√† x√©t nghi·ªám.
        *   Sau ca b·ªánh l√† m·ªôt c√¢u h·ªèi r√µ r√†ng v·ªÅ: ch·∫©n ƒëo√°n c√≥ kh·∫£ nƒÉng nh·∫•t, ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã ∆∞u ti√™n, c∆° ch·∫ø b·ªánh sinh, ho·∫∑c b∆∞·ªõc x·ª≠ tr√≠ ti·∫øp theo.
    *   **Nguy√™n t·∫Øc t·∫°o ƒë√°p √°n nhi·ªÖu (Distractors):**
        *   B·ªën ph∆∞∆°ng √°n sai ph·∫£i h·ª£p l√Ω v√† c√≥ t√≠nh th·ª≠ th√°ch, kh√¥ng ƒë∆∞·ª£c qu√° v√¥ l√Ω.
        *   C√°c ph∆∞∆°ng √°n nhi·ªÖu n√™n l√† c√°c ch·∫©n ƒëo√°n ph√¢n bi·ªát quan tr·ªçng, c√°c ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã ƒë√∫ng nh∆∞ng kh√¥ng ph·∫£i l√† l·ª±a ch·ªçn ∆∞u ti√™n h√†ng ƒë·∫ßu, ho·∫∑c c√°c kh√°i ni·ªám li√™n quan nh∆∞ng kh√¥ng ch√≠nh x√°c trong b·ªëi c·∫£nh ca b·ªánh.
    *   **Nguy√™n t·∫Øc n·ªôi dung:** T·∫≠p trung v√†o c√°c b·ªánh l√Ω ph·ªï bi·∫øn trong th·ª±c h√†nh l√¢m s√†ng, c√°c t√¨nh hu·ªëng c·∫•p c·ª©u, v√† c√°c quy·∫øt ƒë·ªãnh l√¢m s√†ng quan tr·ªçng.
    *   **Tu√¢n th·ªß quy t·∫Øc JSON:** B·∫°n B·∫ÆT BU·ªòC ph·∫£i cung c·∫•p (c√°c) c√¢u tr·∫£ l·ªùi ƒë√∫ng trong m·∫£ng \`correctAnswers\` (ch·ªâ ch·ª©a m·ªôt chu·ªói) KH·ªöP CH√çNH X√ÅC v·ªõi vƒÉn b·∫£n c·ªßa t√πy ch·ªçn, v√† cung c·∫•p l·ªùi gi·∫£i th√≠ch r√µ r√†ng, d·ª±a tr√™n y h·ªçc ch·ª©ng c·ª©.

5.  **T·∫°o C√°c Ho·∫°t ƒê·ªông H·ªçc T·∫≠p Kh√°c:**
    *   **ƒêi·ªÅn v√†o ch·ªó tr·ªëng:** T·∫°o 5-7 c√¢u h·ªèi ƒëi·ªÅn v√†o ch·ªó tr·ªëng t·∫≠p trung v√†o c√°c thu·∫≠t ng·ªØ, gi√° tr·ªã ho·∫∑c kh√°i ni·ªám quan tr·ªçng.
    *   **Thu·∫≠t ng·ªØ:** X√¢y d·ª±ng m·ªôt danh s√°ch c√°c thu·∫≠t ng·ªØ quan tr·ªçng v√† ƒë·ªãnh nghƒ©a c·ªßa ch√∫ng.

6.  **Ngu·ªìn ch√≠nh:** Lu√¥n coi n·ªôi dung c·ªßa ng∆∞·ªùi d√πng l√† ngu·ªìn th√¥ng tin c·ªët l√µi. Kh√¥ng thay ƒë·ªïi √Ω nghƒ©a ho·∫∑c th√¥ng tin c∆° b·∫£n. B·∫°n ch·ªâ l√†m gi√†u v√† t√°i c·∫•u tr√∫c n√≥.`;

    let contents;
    if (source.file) {
      const filePart = { inlineData: { data: source.file.data, mimeType: source.file.mimeType } };
      const textPart = { text: `${basePrompt}${source.text ? `\n\nD∆∞·ªõi ƒë√¢y l√† n·ªôi dung c·∫ßn x·ª≠ l√Ω. H∆∞·ªõng d·∫´n b·ªï sung t·ª´ ng∆∞·ªùi d√πng: "${source.text}"` : '\n\nD∆∞·ªõi ƒë√¢y l√† n·ªôi dung c·∫ßn x·ª≠ l√Ω.'}` };
      contents = { parts: [filePart, textPart] };
    } else {
      contents = `${basePrompt}\n\nD∆∞·ªõi ƒë√¢y l√† n·ªôi dung c·∫ßn x·ª≠ l√Ω: "${source.text}"`;
    }

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: contents,
      config: {
        responseMimeType: "application/json",
        responseSchema: studyPackSchema,
      },
    });

    const jsonString = response.text.trim();
    const generatedPack = JSON.parse(jsonString);

    res.status(200).json(generatedPack);

  } catch (error) {
    console.error('L·ªói ph√≠a server (create-study-pack):', error);
    res.status(500).json({ error: 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o g√≥i h·ªçc t·∫≠p tr√™n m√°y ch·ªß.' });
  }
});

// --- API Endpoint #2: H·ªèi Gia s∆∞ AI ---
app.post('/api/ask-tutor', async (req, res) => {
  try {
    const { context, userQuestion, questionContext } = req.body;
    
    let prompt = `B·∫°n l√† m·ªôt Gia s∆∞ Y khoa AI. Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch r√µ r√†ng, ng·∫Øn g·ªçn v√† h·ªØu √≠ch, d·ª±a tr√™n b·ªëi c·∫£nh ƒë∆∞·ª£c cung c·∫•p.
    **QUAN TR·ªåNG**: H√£y s·ª≠ d·ª•ng Markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n. C·ª• th·ªÉ:
    - S·ª≠ d·ª•ng \`# \`, \`## \`, v√† \`### \` cho c√°c c·∫•p ƒë·ªô ti√™u ƒë·ªÅ kh√°c nhau ƒë·ªÉ c·∫•u tr√∫c c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n.
    - S·ª≠ d·ª•ng \`**text**\` ƒë·ªÉ **in ƒë·∫≠m** c√°c thu·∫≠t ng·ªØ y khoa ho·∫∑c c√°c ƒëi·ªÉm ch√≠nh.
    - S·ª≠ d·ª•ng \`*text*\` ƒë·ªÉ *in nghi√™ng* khi c·∫ßn nh·∫•n m·∫°nh.
    - S·ª≠ d·ª•ng \`__text__\` ƒë·ªÉ __g·∫°ch ch√¢n__ c√°c ph·∫ßn quan tr·ªçng.
    - S·ª≠ d·ª•ng \`==text==\` ƒë·ªÉ ==l√†m n·ªïi b·∫≠t== th√¥ng tin c·∫ßn nh·ªõ.
    - S·ª≠ d·ª•ng danh s√°ch g·∫°ch ƒë·∫ßu d√≤ng (-) ho·∫∑c c√≥ s·ªë (1.) ƒë·ªÉ li·ªát k√™ th√¥ng tin.
    - ƒê·ªÉ tr√¨nh b√†y d·ªØ li·ªáu d·∫°ng b·∫£ng (v√≠ d·ª•: so s√°nh c√°c lo·∫°i thu·ªëc), h√£y s·ª≠ d·ª•ng c√∫ ph√°p b·∫£ng Markdown ti√™u chu·∫©n (s·ª≠ d·ª•ng d·∫•u g·∫°ch ƒë·ª©ng | v√† d·∫•u g·∫°ch ngang -).`;

    if (questionContext) {
        prompt += `\n\n**∆ØU TI√äN H√ÄNG ƒê·∫¶U:** Ng∆∞·ªùi d√πng ƒëang xem x√©t c√¢u h·ªèi tr·∫Øc nghi·ªám sau ƒë√¢y v√† ƒë√£ y√™u c·∫ßu gi·∫£i th√≠ch th√™m. H√£y t·∫≠p trung c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n v√†o vi·ªác l√†m r√µ c√°c kh√°i ni·ªám li√™n quan tr·ª±c ti·∫øp ƒë·∫øn c√¢u h·ªèi v√† l·ªùi gi·∫£i th√≠ch c·ªßa n√≥. H√£y s·ª≠ d·ª•ng b·ªëi c·∫£nh b√†i h·ªçc t·ªïng qu√°t ƒë·ªÉ b·ªï sung cho l·ªùi gi·∫£i th√≠ch c·ªßa b·∫°n n·∫øu c·∫ßn thi·∫øt.
        ---
        **C√¢u h·ªèi tr·∫Øc nghi·ªám ƒëang xem:**
        ${questionContext}
        ---`;
    }

    prompt += `\n\n**B·ªëi c·∫£nh b√†i h·ªçc t·ªïng qu√°t:**\n"${context}"`;
    prompt += `\n\n**C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng:**\n"${userQuestion}"`;

    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
    });

    res.json({ answer: response.text });
  } catch (error) {
    console.error('L·ªói ph√≠a server (ask-tutor):', error);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi.' });
  }
});

// --- API Endpoint #3: T·∫°o th√™m c√¢u h·ªèi tr·∫Øc nghi·ªám ---
app.post('/api/generate-questions', async (req, res) => {
  try {
    const { context, existingQuestions, isM2Style } = req.body;
    
    const quizItemSchema = {
      type: Type.OBJECT,
      properties: {
          question: { type: Type.STRING },
          options: { type: Type.ARRAY, items: { type: Type.STRING } },
          correctAnswers: { type: Type.ARRAY, items: { type: Type.STRING } },
          type: { type: Type.STRING, enum: ['single-choice', 'multiple-choice'] },
          explanation: { type: Type.STRING },
          difficulty: { type: Type.STRING, enum: ['Easy', 'Medium', 'Hard'] }
      },
      required: ["question", "options", "correctAnswers", "type", "explanation", "difficulty"]
    };

    const newQuestionsSchema = {
      type: Type.OBJECT,
      properties: {
          new_questions: {
              type: Type.ARRAY,
              description: "M·ªôt m·∫£ng g·ªìm 5 c√¢u h·ªèi tr·∫Øc nghi·ªám ho√†n to√†n m·ªõi.",
              items: quizItemSchema
          }
      },
      required: ["new_questions"]
    };

    const existingQuestionsString = existingQuestions.map((q) => q.question).join('\n - ');
    const m2Instruction = isM2Style
        ? "M·ªói c√¢u h·ªèi B·∫ÆT BU·ªòC ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng m·ªôt ca l√¢m s√†ng chi ti·∫øt (vignette) theo phong c√°ch M2 Staatsexamen. T·∫•t c·∫£ c√¢u h·ªèi ph·∫£i l√† 'single-choice' v·ªõi 5 ph∆∞∆°ng √°n tr·∫£ l·ªùi."
        : "Bao g·ªìm c·∫£ c√¢u h·ªèi m·ªôt l·ª±a ch·ªçn ('single-choice') v√† nhi·ªÅu l·ª±a ch·ªçn ('multiple-choice').";
            
    const prompt = `B·∫°n l√† m·ªôt chuy√™n gia bi√™n so·∫°n gi√°o tr√¨nh y khoa. D·ª±a tr√™n n·ªôi dung b√†i h·ªçc sau, h√£y t·∫°o ra 5 c√¢u h·ªèi tr·∫Øc nghi·ªám **ho√†n to√†n m·ªõi v√† kh√°c bi·ªát** v·ªõi nh·ªØng c√¢u ƒë√£ c√≥.
    
    **N·ªòI DUNG B√ÄI H·ªåC:**
    ${context}
    
    **C√ÅC C√ÇU H·ªéI ƒê√É C√ì (KH√îNG ƒê∆Ø·ª¢·ª¢C L·∫∂P L·∫†I):**
    - ${existingQuestionsString}
    
    **Y√äU C·∫¶U:**
    1.  T·∫°o ch√≠nh x√°c 5 c√¢u h·ªèi m·ªõi.
    2.  ${m2Instruction}
    3.  C√°c c√¢u h·ªèi ph·∫£i ƒëa d·∫°ng v·ªÅ ƒë·ªô kh√≥ (Easy, Medium, Hard).
    4.  C√°c l·ª±a ch·ªçn sai ph·∫£i h·ª£p l√Ω v√† c√≥ t√≠nh th·ª≠ th√°ch.
    5.  Cung c·∫•p l·ªùi gi·∫£i th√≠ch r√µ r√†ng cho m·ªói c√¢u tr·∫£ l·ªùi ƒë√∫ng.
    6.  Tuy·ªát ƒë·ªëi kh√¥ng l·∫∑p l·∫°i √Ω t∆∞·ªüng ho·∫∑c n·ªôi dung t·ª´ c√°c c√¢u h·ªèi ƒë√£ c√≥.
    7.  **QUAN TR·ªåNG NH·∫§T:** ƒê·ªëi v·ªõi m·ªói c√¢u h·ªèi, b·∫°n B·∫ÆT BU·ªòC ph·∫£i cung c·∫•p (c√°c) c√¢u tr·∫£ l·ªùi ƒë√∫ng trong m·∫£ng \`correctAnswers\`. N·ªôi dung c·ªßa m·ªói chu·ªói trong \`correctAnswers\` ph·∫£i **KH·ªöP CH√çNH X√ÅC** v·ªõi vƒÉn b·∫£n c·ªßa m·ªôt trong c√°c t√πy ch·ªçn trong m·∫£ng \`options\`.`;

    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
        config: {
            responseMimeType: "application/json",
            responseSchema: newQuestionsSchema,
        },
    });

    const jsonString = response.text.trim();
    const result = JSON.parse(jsonString);

    res.status(200).json(result);

  } catch (error) {
    console.error('L·ªói ph√≠a server (generate-questions):', error);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ t·∫°o th√™m c√¢u h·ªèi.' });
  }
});


// 4. Kh·ªüi ƒë·ªông m√°y ch·ªß
app.listen(PORT, () => {
  console.log(`Backend ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});
